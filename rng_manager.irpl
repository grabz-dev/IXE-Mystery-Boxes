false ->*ValidSave

GetEditMode if
	once
		@SeedConfig
	endonce
endif

<-*G_lPhantomsToSpawn 0 gt if
	"$/phantom/phantom" <-*G_lPhantomsToSpawn[0] True CreateUnit pop
	<-*G_lPhantomsToSpawn 0 RemoveListElement
endif

GetUpgradeBoost ->iGem
<-iGem <-iLastGem neq if
	<-iGem ->iLastGem
	
	0.0 ->*G_fGemChance
	
	GetUpgradeBoost 5 gte if
		-1 ->*G_fGemChance
	endif
	
	@GemChanged
endif

:InitBox
	FALSE ->IB_bHasCopy
	-?G_tConf if
		<-G_tConf DeepCopy ->IB_tConfCopy
		<-IB_tConfCopy GetTableValues ->IB_lConfCopy
		TRUE ->IB_bHasCopy
	endif

	TableN (
		"mystery", TableN (
			"name" "Mystery Box",
			"seed" -1,
			"bucket_weight_total" -1,
			"buckets" TableN (
				"reactor" TableN (
					"name" "Reactor"
					"weight" 15,
					"outc_weight_total" -1
					"outcomes" ListN (
						TableN (	"name" "Reactor" "type" "inv", 			"weight" 100, 			"id" "$/reactor/reactor"		"amt" 1		"name" "Reactor"				6 )
					1 )
				4 )
				"attack" TableN (
					"name" "Attack"
					"weight" 25,
					"outc_weight_total" -1
					"outcomes" ListN (
						TableN ("name" "Defender"			"type" "unit", 			"weight" 100, 		"id" "$/defender/defender"								4 )
						TableN ("name" "Gunship"			"type" "unit",			"weight" 100,		"id" "$/gunship/gunship"								4 )
						TableN ("name" "Burrower"			"type" "unit",			"weight" 100,		"id" "/burrower/burrower"								4 )
						TableN ("name" "Snowpiercer"		"type" "unit", 			"weight" 100, 		"id" "/snowpiercer/snowpiercer"								4 )
						TableN ("name" "B.O.B."				"type" "unit", 			"weight" 100, 		"id" "/bobgun/bobgun"									4 )
						TableN ("name" "T.O.M."				"type" "unit", 			"weight" 100, 		"id" "/sentrygun/sentrygun"							4 )
						TableN ("name" "Sentinel"			"type" "unit",			"weight" 100,		"id" "/sentinel/sentinel"				"locked" 2.0 						5 )
						TableN ("name" "Frigate"			"type" "unit", 			"weight" 100, 		"id" "$/frigate/frigate"				"locked" 2.0								5 )
						TableN ("name" "Cannon Phaser"		"type" "unit",			"weight" 100,		"id" "/cannon_phaser/cannon_phaser"		"locked" 3.0 						5 )
						TableN ("name" "Cryo Phaser"		"type" "unit",			"weight" 100,		"id" "/cryo_phaser/cryo_phaser"			"locked" 3.0 							5 )
						TableN ("name" "Sniper"				"type" "unit",			"weight" 50,		"id" "/snipership/snipership"			"locked" 4.0 							5 )
						TableN ("name" "Aegis MLRS"			"type" "unit", 			"weight" 50, 		"id" "/aegis_mlrs/aegis"				"locked" 4.0								5 )		
						TableN ("name" "Annihilator"		"type" "inv", 			"weight" 50, 		"id" "/annihilator/annihilator"			"locked" 6.0 "amt" 1 "name" "Annihilator"				7 )
					13 )
				4 )
				"defend" TableN (
					"name" "Defend"
					"weight" 20,
					"outc_weight_total" -1
					"outcomes" ListN (
						TableN ("name" "Ore Emitter"		"type" "unit", 			"weight" 100, 		"id" "$/acoreemitter/acoreemitter"						4 )
						TableN ("name" "Ore Miner"			"type" "unit", 			"weight" 100, 		"id" "$/oreminer/oreminer"								4 )
						TableN ("name" "AC Emitter"			"type" "unit", 			"weight" 100, 		"id" "/ac_emitter/acemitter"			"props" TableN("power" -150 "interval" 60  2)				5 )
						TableN ("name" "Conv Bomb"			"type" "inv", 			"weight" 100, 		"id" "$/cbomb/cbomb"			"amt" 1 "name" "CBomb"					6 )
						TableN ("name" "Coilship"			"type" "unit", 			"weight" 100, 		"id" "$/coilship/coilship"								4 )
						TableN ("name" "Cryon"				"type" "unit", 			"weight" 100, 		"id" "$/cryon/cryon"									4 )
						TableN ("name" "Digger"				"type" "unit", 			"weight" 100, 		"id" "$/digger/digger"									4 )
						TableN ("name" "Duster"				"type" "unit", 			"weight" 100, 		"id" "$/duster/duster"									4 )
						TableN ("name" "Maker"				"type" "unit", 			"weight" 100, 		"id" "$/maker/maker"									4 )
						TableN ("name" "Ore Miner"			"type" "unit", 			"weight" 100, 		"id" "$/oreminer/oreminer"								4 )
						TableN ("name" "Part Ship"			"type" "unit", 			"weight" 100, 		"id" "$/particulateship/particulateship"				4 )
						TableN ("name" "Portal"				"type" "unit", 			"weight" 100, 		"id" "$/portal/portal"									4 )
						TableN ("name" "Spirit Ship"		"type" "unit", 			"weight" 100, 		"id" "$/spiritship/spiritship"							4 )
						TableN ("name" "Minimaker"			"type" "unit", 			"weight" 100, 		"id" "/minimaker/minimaker"								4 )
						TableN ("name" "Acid Factory"		"type" "unit", 			"weight" 50, 		"id" "/sandfactory/sandfactory"			"props" TableN("SANDTOCREATE" 20  1)					5 )
						TableN ("name" "Pixelium Factory"	"type" "unit", 			"weight" 50, 		"id" "/sandfactory/sandfactory"			"props" TableN("SANDTOCREATE" 18  1)					5 )
						TableN ("name" "Nitron Factory"		"type" "unit", 			"weight" 50, 		"id" "/sandfactory/sandfactory"			"props" TableN("SANDTOCREATE" 26  1)					5 )
						TableN ("name" "Oil Factory"		"type" "unit", 			"weight" 50, 		"id" "/sandfactory/sandfactory"			"props" TableN("SANDTOCREATE" 27  1)					5 )
						TableN ("name" "Angorium Factory"	"type" "unit", 			"weight" 50, 		"id" "/sandfactory/sandfactory"			"props" TableN("SANDTOCREATE" 75  1)					5 )
					19 )
				4 )
				"bad" TableN (
					"name" "Evil"
					"weight" 40
					"outc_weight_total" -1
					"outcomes" ListN (
						TableN ("name" "Creeper"			"type" "creeper", 		"weight" 100, 			"amt" 30000										"evil" true							5 )
						TableN ("name" "Emitter"			"type" "unit", 			"weight" 100, 			"id" "$/emitter/emitter"						"evil_count" true							5 )
						TableN ("name" "Fixed Emitter"		"type" "unit", 			"weight" 100, 			"id" "$/cemitter/cemitter"						"evil" true							5 )
						TableN ("name" "Spawner"			"type" "unit", 			"weight" 100, 			"id" "$/enemyspawner/enemyspawner"				"evil_count" true							5 )
						TableN ("name" "Particulate"		"type" "unit", 			"weight" 100, 			"id" "$/particulateemitter/particulateemitter"	"evil_count" true							5 )
						TableN ("name" "Phantom"			"type" "phantom", 		"weight" 100, 															"evil_count" true							4 )
						TableN ("name" "Thrower"			"type" "unit", 			"weight" 100, 			"id" "$/thrower/thrower"						"evil_count" true							5 )
					7 )
				4 )
			4 )
		4 )
		
		"friend", TableN (
			"name" "Friend Box",
			"seed" -1,
			"bucket_weight_total" -1,
			"buckets" TableN (
				"good" TableN (
					"name" "Friendly"
					"weight" 100,
					"outc_weight_total" -1
					"outcomes" ListN (
						TableN ("name" "Reactor"	"type" "inv", 			"weight" 600, 			"id" "$/reactor/reactor"		"amt" 1		"name" "Reactor"				6 )
						TableN ("name" "Defender"	"type" "unit", 			"weight" 300, 			"id" "$/defender/defender"								4 )
						TableN ("name" "Ore Emitter"	"type" "unit", 		"weight" 200, 			"id" "$/acoreemitter/acoreemitter"						4 )
						TableN ("name" "Ore Miner"	"type" "unit", 			"weight" 200, 			"id" "$/oreminer/oreminer"								4 )
						TableN ("name" "Maker"	"type" "unit", 				"weight" 100, 			"id" "$/maker/maker"									4 )
						TableN ("name" "Coilship"	"type" "unit", 			"weight" 100, 			"id" "$/coilship/coilship"								4 )
						TableN ("name" "Part Ship"	"type" "unit", 			"weight" 100, 			"id" "$/particulateship/particulateship"				4 )
					7 )
				4 )
			1 )
		4 )
	2 ) ->G_tConf
	
	@OnConfTableChanged
	
	
	<-G_lConf 0 do
		#Refresh total weight for buckets
		<-G_lConf[I]{"buckets"} GetTableValues ->ib_lBuckets
		<-IB_lConfCopy[I]{"buckets"} GetTableValues ->ib_lBucketsCopy
		0 ->ib_iTotalWeight
		<-ib_lBuckets 0 do
			<-ib_iTotalWeight <-ib_lBuckets[I]{"weight"} add ->ib_iTotalWeight
		loop
		<-G_lConf[I] "bucket_weight_total" <-ib_iTotalWeight SetTableElement
		#Put seed back if copy
		<-IB_bHasCopy if
			<-G_lConf[I] "seed" <-IB_lConfCopy[I]{"seed"} SetTableElement
		endif
		
		#Refresh total weight for bucket outcomes
		#refresh count
		<-ib_lBuckets 0 do
			<-ib_lBuckets[I] ->ib_tBucket
			<-ib_lBucketsCopy[I] ->ib_tBucketCopy
			0 ->ib_iTotalWeight
			<-ib_tBucket{"outcomes"} 0 do
				<-ib_tBucket{"outcomes"}[I] ->ib_tOutcome
				<-ib_tBucketCopy{"outcomes"}[I] ->ib_tOutcomeCopy
				#calculate final weight
				<-IB_bHasCopy if 
					<-ib_tOutcomeCopy{"weight"} <-ib_tOutcomeCopy{"count"}
				else
					<-ib_tOutcome{"weight"} <-ib_tOutcome{"count"}
				endif asfloat 1.0 add div floor 1 max ->ib_tOutcome{"real_weight"}
				
				<-ib_tOutcome{"locked"} <-*G_fEvilMulti gt if
					0 ->ib_tOutcome{"real_weight"}
				endif
			
				<-ib_iTotalWeight <-ib_tOutcome{"real_weight"} add ->ib_iTotalWeight
				<-ib_tOutcomeCopy{"count"} null eq if
					<-ib_tOutcome "count" 0 SetTableElement
				else
					<-ib_tOutcome "count" <-ib_tOutcomeCopy{"count"} SetTableElement
				endif
			loop
			<-ib_tBucket "outc_weight_total" <-ib_iTotalWeight SetTableElement
		loop
	loop
	
	<-G_lConf trace
:OnConfTableChanged
	<-G_tConf GetTableValues ->G_lConf
	<-G_tConf ->*G_tConf
	<-G_lConf ->*G_lConf
:GameLoaded
	GetGameUpdateCount 0 gt if
		GetEditMode not if
			<-*ValidSave not if
				QuickLoad
			endif
		endif
	endif
	
:BoxOpened
	<-_DATA{"type"} ->bo_sType
	<-_DATA{"pos"} ->bo_vPos
	
	true ->*ValidSave
	QuickSave
	
	<-_DATA{"type"} "mystery" eq if
		<-bo_sType @RandFloatSeeded <-*G_fGemChance 100.0 div lte if
			"$/upgradegem/upgradegem" <-bo_vPos True CreateUnit ->bo_iUID
			0.0 ->*G_fGemChance
			GetUpgradeBoost 5 gte if
				-1 ->*G_fGemChance
			endif
			@GemChanged
			return
		else <-*G_fGemChance -1 gt if
			<-*G_fGemChance 1.5 add ->*G_fGemChance
			@GemChanged
		endif endif
	
	
		<-*G_iMysteryBoxOpened 1 add ->*G_iMysteryBoxOpened
		0.12 <-*G_iMysteryBoxOpened mul 1 add ->*G_fEvilMulti
		@InitBox
		@MysteryChanged
	endif
	
	
	
	<-G_tConf{<-bo_sType} ->bo_tBox
	<-bo_tBox{"buckets"} GetTableValues ->bo_lBuckets
	<-bo_tBox{"bucket_weight_total"} ->bo_tBucketWeightTotal

	#Choose bucket
	<-bo_sType 0 <-bo_tBucketWeightTotal @RandIntSeeded ->bo_iRand
	null ->bo_tSelBucket
	0 ->bo_iCountW
	<-bo_lBuckets 0 do
		<-bo_iCountW <-bo_lBuckets[I]{"weight"} add ->bo_iCountW
		<-bo_iRand <-bo_iCountW lt if
			<-bo_lBuckets[I] ->bo_tSelBucket
			break
		endif
	loop
	
	
	
	
	
	<-bo_tSelBucket{"outcomes"} ->bo_lOutc
	<-bo_tSelBucket{"outc_weight_total"} ->bo_iTotW
	
	#Choose outcome
	<-bo_sType 0 <-bo_iTotW @RandIntSeeded ->bo_iRand
	
	null ->bo_tSelOutc
	0 ->bo_iCountW
	<-bo_lOutc 0 do
		<-bo_iCountW <-bo_lOutc[I]{"real_weight"} add ->bo_iCountW
		<-bo_iRand <-bo_iCountW lt if
			<-bo_lOutc[I] ->bo_tSelOutc
			break
		endif
	loop
	
	1 ->bo_iSpawnCount
	<-bo_tSelOutc{"evil_count"} if
		<-*G_fEvilMulti floor ->bo_iSpawnCount
	endif
	
	<-bo_tSelOutc{"type"} "phantom" eq if
		<-bo_iSpawnCount 0 do
			<-*G_lPhantomsToSpawn <-bo_vPos AppendToList
		loop
	else <-bo_tSelOutc{"type"} "unit" eq if
		<-bo_iSpawnCount 0 do
			<-bo_tSelOutc{"id"} <-bo_vPos True CreateUnit ->bo_iUID
			
			
			<-bo_tSelOutc{"id"} "$/cemitter/cemitter" eq if
				60.0 ->bo_fAmt
				<-bo_tSelOutc{"evil"} if
					<-bo_fAmt <-*G_fEvilMulti mul ->bo_fAmt
				endif
				
				SetControllerArg(<-bo_iUID "cemitter" "productionAmt" <-bo_fAmt) 
				SetControllerArg(<-bo_iUID "cemitter" "productionInterval" 2) 
			endif
			
			<-bo_tSelOutc{"id"} "$/thrower/thrower" eq if
				SetControllerArg(<-bo_iUID GetChildren 0 GetListElement "thrower" "fire_pos" 0 512 RandInt 0 512 RandInt V2 ) 
				SetControllerArg(<-bo_iUID GetChildren 0 GetListElement "thrower" "fire_delay" 5 ) 
				SetControllerArg(<-bo_iUID GetChildren 0 GetListElement "thrower" "fire_spread" 20 ) 
				SetControllerArg(<-bo_iUID GetChildren 0 GetListElement "thrower" "fire_particle_count" 1 ) 
				SetControllerArg(<-bo_iUID GetChildren 0 GetListElement "thrower" "fire_amt_per_particle" 75 ) 
			endif
			
			<-bo_tSelOutc{"props"} null neq if
				<-bo_tSelOutc{"props"} GetTableKeys ->bo_lKeys
				<-bo_lKeys 0 do
					<-bo_iUID ""  <-bo_lKeys[I] <-bo_tSelOutc{"props"}{<-bo_lKeys[I]} SetScriptVar
				loop
			endif
		loop
	else <-bo_tSelOutc{"type"} "creeper" eq if
		<-bo_tSelOutc{"amt"} ->bo_fAmt
		<-bo_tSelOutc{"evil"} if
			<-bo_fAmt <-*G_fEvilMulti mul ->bo_fAmt
		endif
		
		FALSE ->bo_bIsAC
		<-bo_fAmt 0 lt if
			TRUE ->bo_bIsAC
		endif
		<-bo_fAmt abs ->bo_fAmt
		
		<-bo_fAmt 1000 49 mul gte if
			4 ->bo_iRadius
			<-bo_fAmt 81.0 div ->bo_fAmt
		else <-bo_fAmt 1000 25 mul gte if
			3 ->bo_iRadius
			<-bo_fAmt 49.0 div ->bo_fAmt
		else <-bo_fAmt 1000 9 mul gte if
			2 ->bo_iRadius
			<-bo_fAmt 25.0 div ->bo_fAmt
		else <-bo_fAmt 1000 1 mul gte if
			1 ->bo_iRadius
			<-bo_fAmt 9.0 div ->bo_fAmt
		else
			0 ->bo_iRadius
		endif endif endif endif
		
		<-bo_bIsAC if
			<-bo_fAmt -1 mul ->bo_fAmt
		endif
		
		<-bo_vPos.y <-bo_iRadius add 1 add <-bo_vPos.y <-bo_iRadius sub do
			<-bo_vPos.x <-bo_iRadius add 1 add <-bo_vPos.x <-bo_iRadius sub do
				I J <-bo_fAmt AddCreeper
			loop
		loop
	else <-bo_tSelOutc{"type"} "inv" eq if
		<-bo_tSelOutc{"id"} <-bo_tSelOutc{"amt"} -1 AddPlanToInventory
		"+ " <-bo_tSelOutc{"amt"} concat " " concat <-bo_tSelOutc{"name"} concat, <-bo_vPos, 5, 2, 0, "", "", "" ShowBubbleMessage_Sound pop
	endif endif endif endif
	
	<-bo_tSelOutc "count" <-bo_tSelOutc{"count"} 1 add SetTableElement
	@InitBox
	SendMsg("MB_UI_update" "") 
:Once
	@Init
:Awake
	@Init
:Init
	once
		CreateList ->*G_lPhantomsToSpawn
		0 ->*G_iFriendBoxCounter
		0 ->*G_iFriendBoxCost
		0 ->*G_iMysteryBoxOpened
		1 ->*G_fEvilMulti
		0 ->*G_fGemChance
		@InitBox
		@SeedConfig
		"Mystery_Box_Opened" "BoxOpened" RegisterForMsg 
		"Friend_Box_Count_Changed" "FriendChanged" RegisterForMsg
		CreateTable ->*G_tFriendGUITable
		CreateTable ->*G_tMysteryGUITable
		CreateTable ->*G_tGemGUITable
		AddPlanToInventory("/friend_box/friend_box" 999999 -1) 
		AddPlanToInventory("/mystery_box/mystery_box" 999999 -1) 
	endonce
	@OnConfTableChanged
	CreateUI("friend_gui", @UIFriendJSON, <-*G_tFriendGUITable) ->result ->resultString
	CreateUI("mystery_gui", @UIMysteryJSON, <-*G_tMysteryGUITable) ->result ->resultString
	CreateUI("gem_gui", @UIGemJSON, <-*G_tGemGUITable) ->result ->resultString
	@FriendChanged
	@MysteryChanged
	@GemChanged
	SendMsg("MB_UI_update" "") 
# -
# Description: Generate a random seed for every box type in the config.
# Arguments: 
# Result: 
:SeedConfig 
	#Seed built-in RNG.
	ElapsedTime 10000 mod 0 do
		RandFloat pop 
	loop
	
	<-G_lConf 0 do
		<-G_lConf[I] "seed" 1 10000000 RandInt SetTableElement
	loop
	
# s1 i1 i2 - i3
# Description: Generate a random integer between min (inclusive) or max (exclusive) using a box's current seed and increment the seed.
# Arguments: The name of the current box, min, max
# Result: Random int
:RandIntSeeded
	->RIS_iMaxExcl
	->RIS_iMinIncl
	@RandFloatSeeded ->RIS_iRand
	
	<-RIS_iMaxExcl <-RIS_iMinIncl sub <-RIS_iRand mul floor <-RIS_iMinIncl add

# s1 - f1
# Description: Generate a random float between 0 and 1 using a box's current seed and increment the seed.
# Arguments: The name of the current box
# Result: Random float
:RandFloatSeeded
	->RFS_sType
	
	<-G_tConf{<-RFS_sType}{"seed"} ->RFS_iSeed
	<-RFS_iSeed sin 10000.0 mul ->RFS_fVal
	
	#Increment seed.
	<-G_tConf{<-RFS_sType} "seed" <-RFS_iSeed 1 add SetTableElement
	
	<-RFS_fVal <-RFS_fVal floor sub
:FriendChanged
	<-*G_tFriendGUITable "friend_total" "Total: " <-*G_iFriendBoxCounter concat SetTableElement
	<-*G_tFriendGUITable "friend_cost" "Next Cost: " <-*G_iFriendBoxCost concat SetTableElement
:MysteryChanged
	<-*G_tMysteryGUITable "mystery_opened" "Opened: " <-*G_iMysteryBoxOpened concat SetTableElement
	<-*G_tMysteryGUITable "evil_mult" "Evil Multi: " <-*G_fEvilMulti 100.0 mul floor 100.0 div concat SetTableElement
:GemChanged
	<-*G_fGemChance -1 eq if
		<-*G_tGemGUITable "gem_chance" "Full Power" SetTableElement
	else
		<-*G_tGemGUITable "gem_chance" "Chance: " <-*G_fGemChance 100.0 mul floor 100.0 div "%" concat3 SetTableElement
	endif
:UIGemJSON
	"{
		'anchor': [0, 0],
		'pos': [0, 187],
		'pivot': [0, 0],
		'width': 186,
		'height': 1,
		'bgcolor': '#00000000',
		'Components': 	[
							{
								'type': 'image', 
								'pos': [0, -47], 
								'width': 186, 
								'height': 47,
								'image': 'ui_panel_gem.png',
							},
							{
								'type': 'image', 
								'pos': [4, -38], 
								'width': 34, 
								'height': 34,
								'image': 'upgrade_gem.png',
							},
							{
								'type': 'text', 
								'pos': [42, -31],
								'color': '#fff',
								'text': 'Chance:',
								'name': 'gem_chance',
							}
						]
 
	}"	
:UIMysteryJSON
	"{
		'anchor': [0, 0],
		'pos': [0, 140],
		'pivot': [0, 0],
		'width': 186,
		'height': 1,
		'bgcolor': '#00000000',
		'Components': 	[
							{
								'type': 'image', 
								'pos': [0, -70], 
								'width': 186, 
								'height': 70,
								'image': 'ui_panel_friend.png',
							},
							{
								'type': 'image', 
								'pos': [4, -38], 
								'width': 34, 
								'height': 34,
								'image': 'mystery_box/mystery_box.png',
							},
							{
								'type': 'text', 
								'pos': [42, -31],
								'color': '#fff',
								'text': 'Opened:',
								'name': 'mystery_opened',
							},
							{
								'type': 'text', 
								'pos': [4, -60],
								'color': '#fff',
								'text': 'Evil Multi:',
								'name': 'evil_mult',
							},	
						]
 
	}"	
:UIFriendJSON
	"{
		'anchor': [0, 0],
		'pos': [0, 70],
		'pivot': [0, 0],
		'width': 186,
		'height': 1,
		'bgcolor': '#00000000',
		'Components': 	[
							{
								'type': 'image', 
								'pos': [0, -70], 
								'width': 186, 
								'height': 70,
								'image': 'ui_panel_friend.png',
							},
							{
								'type': 'image', 
								'pos': [4, -38], 
								'width': 34, 
								'height': 34,
								'image': 'friend_box/friend_box.png',
							},
							{
								'type': 'text', 
								'pos': [42, -31],
								'color': '#fff',
								'text': 'Total:',
								'name': 'friend_total',
							},
							{
								'type': 'text', 
								'pos': [4, -60],
								'color': '#fff',
								'text': 'Next Cost:',
								'name': 'friend_cost',
							},	
						]
 
	}"	
